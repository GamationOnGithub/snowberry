<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net452</TargetFramework>
    <AssemblyName>Snowberry</AssemblyName>
    <RootNamespace>Snowberry</RootNamespace>
    <LangVersion>preview</LangVersion>
    <CelestePrefix Condition="'$(CelestePrefix)' == '' And Exists('..\..\..\Celeste.exe')">..\..\..</CelestePrefix>
    <CelestePrefix Condition="'$(CelestePrefix)' == ''">lib-stripped</CelestePrefix>
    <!-- Use the legacy reference dir for Core installs -->
    <CelesteIsCore>false</CelesteIsCore>
    <CelesteIsCore Condition="Exists('$(CelestePrefix)\Celeste.dll')">true</CelesteIsCore>
    <CelestePrefix Condition="$(CelesteIsCore)">$(CelestePrefix)\legacyRef</CelestePrefix>

    <CelesteType Condition="'$(CelesteType)' == '' And Exists('$(CelestePrefix)\BuildIsXNA.txt')">XNA</CelesteType>
    <CelesteType Condition="'$(CelesteType)' == ''">FNA</CelesteType>
    <XNAPath Condition="'$(XNAPath)' == ''">$(WINDIR)\Microsoft.NET\assembly\GAC_32\{0}\v4.0_4.0.0.0__842cf8be1de50553\{0}.dll</XNAPath>
  </PropertyGroup>

  <Target Name="CheckCoreInstall" BeforeTargets="PrepareForBuild" Condition="$(CelesteIsCore)">
    <Error Condition="!Exists('$(CelestePrefix)')" Text="Detected a .NET Core Everest install without the required legacyRef install needed to build .NET Framework mods - see the Everest wiki (https://github.com/EverestAPI/Resources/wiki/Code-Mod-Core-Migration-Guide) for info on how to set it up" />
    <Message Text="Building against .NET Core Everest legacyRef install" Importance="high" />
  </Target>

  <ItemGroup>
    <Reference Include="$(CelestePrefix)\Celeste.exe">
      <Private>false</Private>
    </Reference>
    <Reference Include="$(CelestePrefix)\MMHOOK_Celeste.dll">
      <Private>false</Private>
    </Reference>
    <Reference Include="System.ValueTuple">
      <HintPath>$(CelestePrefix)\System.ValueTuple.dll</HintPath>
    </Reference>
    <Reference Include="DotNetZip">
      <HintPath>$(CelestePrefix)\DotNetZip.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="JetBrains.Annotations" Version="2023.3.0" />
    <PackageReference Include="Mono.Cecil" Version="0.11.4" PrivateAssets="all" ExcludeAssets="runtime" />
    <PackageReference Include="MonoMod" Version="22.7.31.1" PrivateAssets="all" ExcludeAssets="runtime">
      <IncludeAssets>compile; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="MonoMod.RuntimeDetour" Version="22.7.31.1" PrivateAssets="all" ExcludeAssets="runtime">
      <IncludeAssets>compile; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="MonoMod.Utils" Version="22.7.31.1" PrivateAssets="all" ExcludeAssets="runtime">
      <IncludeAssets>compile; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="NLua" Version="1.4.32" />
    <PackageReference Include="YamlDotNet" Version="8.1.2" PrivateAssets="all" ExcludeAssets="runtime" />
  </ItemGroup>
  <Choose>
    <When Condition="'$(CelesteType)' == 'FNA'">
      <ItemGroup>
        <Reference Include="$(CelestePrefix)\FNA.dll">
          <Private>false</Private>
        </Reference>
      </ItemGroup>
    </When>
    <When Condition="'$(CelesteType)' == 'XNA'">
      <ItemGroup>
        <Reference Include="$([System.String]::Format('$(XNAPath)', 'Microsoft.Xna.Framework'))">
          <Private>false</Private>
        </Reference>
        <Reference Include="$([System.String]::Format('$(XNAPath)', 'Microsoft.Xna.Framework.Game'))">
          <Private>false</Private>
        </Reference>
        <Reference Include="$([System.String]::Format('$(XNAPath)', 'Microsoft.Xna.Framework.Graphics'))">
          <Private>false</Private>
        </Reference>
      </ItemGroup>
    </When>
  </Choose>
  <Target Name="CopyFiles" AfterTargets="Build">
    <Copy SourceFiles="$(OutputPath)\Snowberry.dll" DestinationFolder="..\bin" />
  </Target>
</Project>